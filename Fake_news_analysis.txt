# -*- coding: utf-8 -*-
"""
Created on Mon Nov 18 11:40:39 2019

@author: Amit Verma
"""

# Steps to dectecting to fake news.
# 1. import necessary package.
# 2. import dataset in to spyder and get the shape and head.
# 3. get the label from the dataset  
    import numpy as np
    import pandas as pd
    import itertools
    from sklearn.model_selection import train_test_split
    from sklearn.feature_extraction.text import CountVectorizer
    from sklearn.feature_extraction.text import TfidfVectorizer
    from sklearn.linear_model import PassiveAggressiveClassifier
    from sklearn.metrics import accuracy_score, confusion_matrix
    from sklearn.naive_bayes import MultinomialNB
    from nltk import word_tokenize
    import matplotlib.pyplot as plt
news=pd.read_csv("E:/Python__Deep Learning/Export_data/news.csv",header=0)
news.shape
news.head
news.columns
labels=news.Label
labels.head()

# =============================================================================
# Data exploration Analysis 
# =============================================================================


# draw line plot for date values - display date with number of news per days
#type(news['Date'])
g1=news.Date.value_counts()
plt.plot(news.Date.unique(),g1)
plt.ylabel("Count of news",fontsize=10)
plt.xlabel("Date values",fontsize=12)

# draw line plot for real and fake news plots

# draw column chart for headline_category

news[['category','headline0','headline1','headline2','headline3']] = news.headline_category.str.split(".",expand=True) 

g2=news.category.value_counts()
plt.barh(y=g2.index[:20],width=g2[:20])

# draw stack column chart for headline_category with label(real and fake)

g3=pd.pivot_table(news,index='category',columns='Label',
                  aggfunc='size',fill_value=0)

N=20
ind=np.arange(N)
fig,ax=plt.subplots()
p1=ax.bar(ind,g3.REAL[:20],width=0.3)
p2=ax.bar(ind+0.3,g3.FAKE[:20],width=0.3)

# Identify percentage or counts of real and fake news - draw pie chart for this
# or column chart
g4=news.Label.value_counts()
g4/len(news)

plt.pie(g4,labels=g4.index,autopct='%1.1f%%')



# Identify which month we have more fake news - column chart for each month
# with fake news only

news['month']=pd.DatetimeIndex(news['Date']).month

g5=pd.pivot_table(news,index='Label',columns='month',
                  aggfunc='size',fill_value=0)
g5.iloc[0,:]

# column chart of fake news
plt.bar(x=g5.columns,height=g5.iloc[0,:])
# line chart of fake news
plt.plot(g5.columns,g5.iloc[0,:])

# draw line plot for real news plots
plt.plot(g5.columns,g5.iloc[1,:])


# preprocessing of data -
# Identify specific words which may leads to fake news such as money/curreny/
# amount/numeric/death related news etc values.


# train and test dataset
train_x,test_x,train_y,test_y=train_test_split(news['headline_text'],labels,test_size=0.2,random_state=10)


plt.bar(x=train_y.unique(),height=train_y.value_counts()[0:2])

# feature extraction is done by your methods automatically
#Method-1  tfidf method
tfidf_vectorizer=TfidfVectorizer(stop_words='english',max_df=0.7)
tfidf_train=tfidf_vectorizer.fit_transform(train_x)
tfidf_test=tfidf_vectorizer.transform(test_x)


#Method-1 Passive_Aggressive_Classifier
pas_clas=PassiveAggressiveClassifier(max_iter=50)
pas_clas.fit(tfidf_train,train_y)


y_pred=pas_clas.predict(tfidf_test)
score=accuracy_score(test_y,y_pred)
print(f'Accuracy:{round(score*100,2)}%')
confusion_matrix(test_y,y_pred,labels=['FAKE','REAL'])  

# =============================================================================
# Accuracy:89.58%
# array([[   56,  1094],
#        [  989, 17861]], dtype=int64)
# 
# =============================================================================


#Method-2 naivebayesclasifier

mul=MultinomialNB()
mul.fit(tfidf_train,train_y)

y_pred=mul.predict(tfidf_test)
score=accuracy_score(test_y,y_pred)
print(f'Accuracy:{round(score*100,2)}%')
confusion_matrix(test_y,y_pred,labels=['FAKE','REAL'])  
from sklearn.metrics import classification_report
classification_report(test_y,y_pred)
# =============================================================================
# Accuracy:94.25%
# Out[105]: 
# array([[    0,  1150],
#        [    0, 18850]], dtype=int64)
# 
# =============================================================================


#method-2 count_vectorize
count_vectorizer=CountVectorizer(stop_words='english')
count_train=count_vectorizer.fit_transform(train_x)
count_test=count_vectorizer.transform(test_x)
 
#Method-1 Passive_Aggressive_Classifier
pas_clas=PassiveAggressiveClassifier(max_iter=50)
pas_clas.fit(count_train,train_y)


y_pred=pas_clas.predict(count_test)
score=accuracy_score(test_y,y_pred)
print(f'Accuracy:{round(score*100,2)}%')
confusion_matrix(test_y,y_pred,labels=['FAKE','REAL'])  


# =============================================================================
# Accuracy:88.0%
# Out[108]: 
# array([[   83,  1067],
#       [ 1333, 17517]], dtype=int64)
# =============================================================================

#Method-2 naivebayesclasifier

count_mul=MultinomialNB()
count_mul.fit(count_train,train_y)

y_pred=mul.predict(count_test)
score=accuracy_score(test_y,y_pred)
print(f'Accuracy:{round(score*100,2)}%')
confusion_matrix(test_y,y_pred,labels=['FAKE','REAL'])   

# =============================================================================
# Accuracy:94.25%
# Out[110]: 
# array([[    0,  1150],
#        [    0, 18850]], dtype=int64)
# =============================================================================

# =============================================================================
# heat map
# coloumn chart
# presion tree table.
# tfidf formula 
# naviebiaused formula.
# =============================================================================

import seaborn as sns
import matplotlib.pyplot as plt
sns.heatmap(confusion_matrix(test_y,y_pred,labels=['FAKE','REAL']))

# Count of real and Fake news in data
plt.bar(x=train_y.unique(),height=train_y.value_counts()[0:2])



